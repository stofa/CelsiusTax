<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiHelpTitle" xml:space="preserve">
    <value>Wie kann ich einen API Key erstellen?</value>
  </data>
  <data name="CelsiusApiKey" xml:space="preserve">
    <value>Celsius API Key</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Schliessen</value>
  </data>
  <data name="Coin" xml:space="preserve">
    <value>Coin / Währung</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Währung</value>
  </data>
  <data name="EnterApiKey" xml:space="preserve">
    <value>Celsius API Key (z.B. 5sbaa32c-225a-3244-dsd4-86476dfsb218)</value>
  </data>
  <data name="GenerateApiKey" xml:space="preserve">
    <value>Generiere den API Key. Du musst mindestens "Read Transactions" zulassen.</value>
  </data>
  <data name="GenerateReport" xml:space="preserve">
    <value>Erstelle Report</value>
  </data>
  <data name="GotoProfile" xml:space="preserve">
    <value>Gehe zu deiner Profil Seite oben rechts.</value>
  </data>
  <data name="InterestsInCurrency" xml:space="preserve">
    <value>Zinsen in</value>
  </data>
  <data name="InterestsInUsd" xml:space="preserve">
    <value>Zinsen in USD</value>
  </data>
  <data name="KeyPrivacy" xml:space="preserve">
    <value>Wir speichern und geben deinen API Key nicht weiter. Du kannst den Code der Applikation hier einsehen:</value>
  </data>
  <data name="Remarks" xml:space="preserve">
    <value>Du kannst diese App verwenden, wenn du die Zinsen von Celsius als Einkommen versteuern musst. Pro Coin / Währung siehst du wie viel Zinsen zu erhalten hast. Die Zinsen werden per entsprechendem Stichtag zu diesem Tageskurs in deine Währung umgerechnet.</value>
  </data>
  <data name="SeeExample" xml:space="preserve">
    <value>So sieht das Resultat aus:</value>
  </data>
  <data name="TaxNotes" xml:space="preserve">
    <value>Diese Auswertung wurde für das folgende Jahr erstellt:</value>
  </data>
  <data name="TaxYear" xml:space="preserve">
    <value>Steuerjahr</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Celsius Zins Auswertung</value>
  </data>
  <data name="UnexcpectedError" xml:space="preserve">
    <value>Ein unerwarteter Fehler ist aufgetreten. Stelle sicher, dass der API Key korrekt ist und die Abfrage der Transaktionen zugelassen ist. Du kannst mich hier kontaktiere:</value>
  </data>
  <data name="UseTheApiKey" xml:space="preserve">
    <value>Verwende den generierten API Key um den Report zu laden. Du kannst den Key dannach löschen.</value>
  </data>
</root>